{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9a6bba7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T07:41:08.155536Z",
     "iopub.status.busy": "2025-10-02T07:41:08.155325Z",
     "iopub.status.idle": "2025-10-02T07:42:36.637332Z",
     "shell.execute_reply": "2025-10-02T07:42:36.636532Z"
    },
    "papermill": {
     "duration": 88.487486,
     "end_time": "2025-10-02T07:42:36.638860",
     "exception": false,
     "start_time": "2025-10-02T07:41:08.151374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m620.6/620.6 MB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m88.7/88.7 kB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m66.8/66.8 kB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.9/49.9 MB\u001b[0m \u001b[31m36.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.2/5.2 MB\u001b[0m \u001b[31m102.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.7/9.7 MB\u001b[0m \u001b[31m101.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m63.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m109.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m64.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.2/4.2 MB\u001b[0m \u001b[31m93.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m322.0/322.0 kB\u001b[0m \u001b[31m23.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.5/5.5 MB\u001b[0m \u001b[31m102.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery-storage<3.0.0,>=2.30.0, which is not installed.\r\n",
      "google-api-core 1.34.1 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<4.0.0dev,>=3.19.5, but you have protobuf 6.32.1 which is incompatible.\r\n",
      "datasets 3.6.0 requires fsspec[http]<=2025.3.0,>=2023.1.0, but you have fsspec 2025.5.1 which is incompatible.\r\n",
      "google-cloud-translate 3.12.1 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.19.5, but you have protobuf 6.32.1 which is incompatible.\r\n",
      "category-encoders 2.7.0 requires scikit-learn<1.6.0,>=1.0.0, but you have scikit-learn 1.7.2 which is incompatible.\r\n",
      "cesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "google-colab 1.0.0 requires google-auth==2.38.0, but you have google-auth 2.40.3 which is incompatible.\r\n",
      "google-colab 1.0.0 requires notebook==6.5.7, but you have notebook 6.5.4 which is incompatible.\r\n",
      "google-colab 1.0.0 requires pandas==2.2.2, but you have pandas 2.2.3 which is incompatible.\r\n",
      "google-colab 1.0.0 requires requests==2.32.3, but you have requests 2.32.4 which is incompatible.\r\n",
      "google-colab 1.0.0 requires tornado==6.4.2, but you have tornado 6.5.1 which is incompatible.\r\n",
      "dopamine-rl 4.1.2 requires gymnasium>=1.0.0, but you have gymnasium 0.29.0 which is incompatible.\r\n",
      "sklearn-compat 0.1.3 requires scikit-learn<1.7,>=1.2, but you have scikit-learn 1.7.2 which is incompatible.\r\n",
      "pandas-gbq 0.29.1 requires google-api-core<3.0.0,>=2.10.2, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "google-ai-generativelanguage 0.6.15 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 6.32.1 which is incompatible.\r\n",
      "tf-keras 2.18.0 requires tensorflow<2.19,>=2.18, but you have tensorflow 2.20.0 which is incompatible.\r\n",
      "tensorflow-decision-forests 1.11.0 requires tensorflow==2.18.0, but you have tensorflow 2.20.0 which is incompatible.\r\n",
      "gcsfs 2025.3.2 requires fsspec==2025.3.2, but you have fsspec 2025.5.1 which is incompatible.\r\n",
      "langchain-core 0.3.66 requires packaging<25,>=23.2, but you have packaging 25.0 which is incompatible.\r\n",
      "google-cloud-storage 2.19.0 requires google-api-core<3.0.0dev,>=2.15.0, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "tensorflow-text 2.18.1 requires tensorflow<2.19,>=2.18.0, but you have tensorflow 2.20.0 which is incompatible.\r\n",
      "dataproc-spark-connect 0.7.5 requires google-api-core>=2.19, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.25.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\r\n",
      "jupyter-kernel-gateway 2.5.2 requires jupyter-client<8.0,>=5.2.0, but you have jupyter-client 8.6.3 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip -q install roboflow lxml scikit-learn tensorflow==2.* --upgrade\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1d15a95f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T07:42:36.657540Z",
     "iopub.status.busy": "2025-10-02T07:42:36.657301Z",
     "iopub.status.idle": "2025-10-02T07:42:43.945719Z",
     "shell.execute_reply": "2025-10-02T07:42:43.944928Z"
    },
    "papermill": {
     "duration": 7.299257,
     "end_time": "2025-10-02T07:42:43.947187",
     "exception": false,
     "start_time": "2025-10-02T07:42:36.647930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.7/9.7 MB\u001b[0m \u001b[31m99.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "category-encoders 2.7.0 requires scikit-learn<1.6.0,>=1.0.0, but you have scikit-learn 1.7.2 which is incompatible.\r\n",
      "cesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "sklearn-compat 0.1.3 requires scikit-learn<1.7,>=1.2, but you have scikit-learn 1.7.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip -q uninstall -y scikit-learn scikit-learn-intelex\n",
    "!pip -q install --no-cache-dir --upgrade scikit-learn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "524f7367",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T07:42:43.967750Z",
     "iopub.status.busy": "2025-10-02T07:42:43.967125Z",
     "iopub.status.idle": "2025-10-02T07:42:51.529571Z",
     "shell.execute_reply": "2025-10-02T07:42:51.528704Z"
    },
    "papermill": {
     "duration": 7.57333,
     "end_time": "2025-10-02T07:42:51.530706",
     "exception": false,
     "start_time": "2025-10-02T07:42:43.957376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TF: 2.20.0\n"
     ]
    }
   ],
   "source": [
    "import os, glob, random, json, math\n",
    "import xml.etree.ElementTree as ET\n",
    "from pathlib import Path\n",
    "from collections import Counter\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.utils.class_weight import compute_class_weight\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
    "from tensorflow.keras.applications import ResNet50, VGG19\n",
    "from tensorflow.keras.applications.resnet50 import preprocess_input as resnet_preprocess\n",
    "from tensorflow.keras.applications.vgg19 import preprocess_input as vgg_preprocess\n",
    "\n",
    "print(\"TF:\", tf.__version__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "92a71510",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T07:42:51.550853Z",
     "iopub.status.busy": "2025-10-02T07:42:51.549890Z",
     "iopub.status.idle": "2025-10-02T07:42:56.500817Z",
     "shell.execute_reply": "2025-10-02T07:42:56.499859Z"
    },
    "papermill": {
     "duration": 4.961651,
     "end_time": "2025-10-02T07:42:56.501956",
     "exception": false,
     "start_time": "2025-10-02T07:42:51.540305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: roboflow in /usr/local/lib/python3.11/dist-packages (1.2.9)\r\n",
      "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from roboflow) (2025.6.15)\r\n",
      "Requirement already satisfied: idna==3.7 in /usr/local/lib/python3.11/dist-packages (from roboflow) (3.7)\r\n",
      "Requirement already satisfied: cycler in /usr/local/lib/python3.11/dist-packages (from roboflow) (0.12.1)\r\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from roboflow) (1.4.8)\r\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from roboflow) (3.7.2)\r\n",
      "Requirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.11/dist-packages (from roboflow) (1.26.4)\r\n",
      "Requirement already satisfied: opencv-python-headless==4.10.0.84 in /usr/local/lib/python3.11/dist-packages (from roboflow) (4.10.0.84)\r\n",
      "Requirement already satisfied: Pillow>=7.1.2 in /usr/local/lib/python3.11/dist-packages (from roboflow) (11.2.1)\r\n",
      "Requirement already satisfied: pi-heif<2 in /usr/local/lib/python3.11/dist-packages (from roboflow) (1.1.1)\r\n",
      "Requirement already satisfied: pillow-avif-plugin<2 in /usr/local/lib/python3.11/dist-packages (from roboflow) (1.5.2)\r\n",
      "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (from roboflow) (2.9.0.post0)\r\n",
      "Requirement already satisfied: python-dotenv in /usr/local/lib/python3.11/dist-packages (from roboflow) (1.1.1)\r\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from roboflow) (2.32.4)\r\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from roboflow) (1.17.0)\r\n",
      "Requirement already satisfied: urllib3>=1.26.6 in /usr/local/lib/python3.11/dist-packages (from roboflow) (2.5.0)\r\n",
      "Requirement already satisfied: tqdm>=4.41.0 in /usr/local/lib/python3.11/dist-packages (from roboflow) (4.67.1)\r\n",
      "Requirement already satisfied: PyYAML>=5.3.1 in /usr/local/lib/python3.11/dist-packages (from roboflow) (6.0.2)\r\n",
      "Requirement already satisfied: requests-toolbelt in /usr/local/lib/python3.11/dist-packages (from roboflow) (1.0.0)\r\n",
      "Requirement already satisfied: filetype in /usr/local/lib/python3.11/dist-packages (from roboflow) (1.2.0)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.18.5->roboflow) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.18.5->roboflow) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.18.5->roboflow) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.18.5->roboflow) (2025.2.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.18.5->roboflow) (2022.2.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.18.5->roboflow) (2.4.1)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->roboflow) (1.3.2)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->roboflow) (4.58.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->roboflow) (25.0)\r\n",
      "Requirement already satisfied: pyparsing<3.1,>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->roboflow) (3.0.9)\r\n",
      "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->roboflow) (3.4.2)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.18.5->roboflow) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.18.5->roboflow) (2022.2.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.18.5->roboflow) (1.4.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.18.5->roboflow) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.18.5->roboflow) (2024.2.0)\r\n",
      "loading Roboflow workspace...\n",
      "loading Roboflow project...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading Dataset Version Zip in Rice-Disease-3 to voc:: 100%|██████████| 567/567 [00:00<00:00, 53498.53it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Extracting Dataset Version Zip to Rice-Disease-3 in voc:: 100%|██████████| 41/41 [00:00<00:00, 7196.76it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset at: /kaggle/working/Rice-Disease-3\n",
      "Subdirs: ['train', 'valid', 'test']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#!pip install roboflow\n",
    "from roboflow import Roboflow\n",
    "!pip install roboflow\n",
    "\n",
    "# ---- Edit only if needed ----\n",
    "RF_API_KEY = \"xZ7ubbvNYZYLLtJMW1At\"   # you provided this\n",
    "WORKSPACE  = \"agricvmodel\"\n",
    "PROJECT    = \"rice-disease-aplaz\"\n",
    "VERSION    = 3\n",
    "EXPORT_FMT = \"voc\"                     # we’ll parse VOC XMLs\n",
    "# ------------------------------\n",
    "\n",
    "rf = Roboflow(api_key=RF_API_KEY)\n",
    "project = rf.workspace(WORKSPACE).project(PROJECT)\n",
    "version = project.version(VERSION)\n",
    "dataset = version.download(EXPORT_FMT)\n",
    "\n",
    "DATA_ROOT = Path(dataset.location)  # roboflow SDK gives .location to the folder\n",
    "print(\"Dataset at:\", DATA_ROOT.resolve())\n",
    "print(\"Subdirs:\", [p.name for p in DATA_ROOT.iterdir() if p.is_dir()])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee2a1efc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T07:42:56.523002Z",
     "iopub.status.busy": "2025-10-02T07:42:56.522757Z",
     "iopub.status.idle": "2025-10-02T07:42:56.551477Z",
     "shell.execute_reply": "2025-10-02T07:42:56.550555Z"
    },
    "papermill": {
     "duration": 0.040243,
     "end_time": "2025-10-02T07:42:56.552757",
     "exception": false,
     "start_time": "2025-10-02T07:42:56.512514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total images used: 18\n",
      "   split                                              image            label\n",
      "0  train  /kaggle/working/Rice-Disease-3/train/01346_jpg...        brownspot\n",
      "1  train  /kaggle/working/Rice-Disease-3/train/img_blb_3...  baterial_blight\n",
      "2  train  /kaggle/working/Rice-Disease-3/train/img_blb_3...  baterial_blight\n",
      "3  train  /kaggle/working/Rice-Disease-3/train/img_blb_8...  baterial_blight\n",
      "4  train  /kaggle/working/Rice-Disease-3/train/img_blb_9...  baterial_blight\n",
      "Class counts: {'brownspot': 6, 'baterial_blight': 6, 'rice_blast': 6}\n"
     ]
    }
   ],
   "source": [
    "def xml_to_label(xml_path: Path):\n",
    "    \"\"\"\n",
    "    Parse a VOC XML and return the FIRST object's class name.\n",
    "    Modify if you need a different rule (e.g., skip multi-label).\n",
    "    \"\"\"\n",
    "    try:\n",
    "        tree = ET.parse(xml_path)\n",
    "        root = tree.getroot()\n",
    "        obj = root.find('object')\n",
    "        if obj is None:\n",
    "            return None\n",
    "        name = obj.find('name')\n",
    "        return name.text.strip() if name is not None else None\n",
    "    except Exception as e:\n",
    "        print(\"Bad XML:\", xml_path, e)\n",
    "        return None\n",
    "\n",
    "def gather_samples(data_root: Path):\n",
    "    rows = []\n",
    "    for split in [\"train\", \"valid\", \"test\"]:\n",
    "        img_dir = data_root / split\n",
    "        if not img_dir.exists(): \n",
    "            continue\n",
    "        # VOC convention: annotations often in same folder; Roboflow keeps xml next to image\n",
    "        images = sorted(glob.glob(str(img_dir / \"*.*\")))\n",
    "        for img_path in images:\n",
    "            img_path = Path(img_path)\n",
    "            if img_path.suffix.lower() not in [\".jpg\", \".jpeg\", \".png\"]:\n",
    "                continue\n",
    "            xml_path = img_path.with_suffix(\".xml\")\n",
    "            if not xml_path.exists():\n",
    "                # sometimes Roboflow puts XMLs under /annotations; try that\n",
    "                alt_xml = img_dir / \"annotations\" / (img_path.stem + \".xml\")\n",
    "                xml_path = alt_xml if alt_xml.exists() else None\n",
    "            if xml_path is None or not xml_path.exists():\n",
    "                # no XML -> skip for classification\n",
    "                continue\n",
    "            label = xml_to_label(xml_path)\n",
    "            if label is None:\n",
    "                continue\n",
    "            rows.append({\"split\": split, \"image\": str(img_path), \"label\": label})\n",
    "    return pd.DataFrame(rows)\n",
    "\n",
    "df = gather_samples(DATA_ROOT)\n",
    "print(\"Total images used:\", len(df))\n",
    "print(df.head())\n",
    "print(\"Class counts:\", df['label'].value_counts().to_dict())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2781bb73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T07:42:56.574093Z",
     "iopub.status.busy": "2025-10-02T07:42:56.573825Z",
     "iopub.status.idle": "2025-10-02T07:42:56.585487Z",
     "shell.execute_reply": "2025-10-02T07:42:56.584739Z"
    },
    "papermill": {
     "duration": 0.023174,
     "end_time": "2025-10-02T07:42:56.586609",
     "exception": false,
     "start_time": "2025-10-02T07:42:56.563435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classes: ['baterial_blight', 'brownspot', 'rice_blast']\n"
     ]
    }
   ],
   "source": [
    "le = LabelEncoder()\n",
    "df[\"label_id\"] = le.fit_transform(df[\"label\"])\n",
    "class_names = list(le.classes_)\n",
    "num_classes = len(class_names)\n",
    "print(\"Classes:\", class_names)\n",
    "\n",
    "# Shuffle once for reproducibility\n",
    "df = df.sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "\n",
    "# CV settings\n",
    "N_SPLITS = 5\n",
    "skf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=42)\n",
    "\n",
    "IMG_SIZE = (224, 224)   # ResNet/VGG default\n",
    "BATCH    = 16\n",
    "EPOCHS   = 10           # increase later as needed\n",
    "MODEL_FAMILY = \"resnet\" # \"resnet\" or \"vgg\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7d106fe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T07:42:56.605909Z",
     "iopub.status.busy": "2025-10-02T07:42:56.605670Z",
     "iopub.status.idle": "2025-10-02T07:42:56.611842Z",
     "shell.execute_reply": "2025-10-02T07:42:56.611165Z"
    },
    "papermill": {
     "duration": 0.017016,
     "end_time": "2025-10-02T07:42:56.612934",
     "exception": false,
     "start_time": "2025-10-02T07:42:56.595918",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "AUTOTUNE = tf.data.AUTOTUNE\n",
    "\n",
    "def load_image(path, label_id):\n",
    "    img = tf.io.read_file(path)\n",
    "    img = tf.image.decode_image(img, channels=3, expand_animations=False)\n",
    "    img = tf.image.resize(img, IMG_SIZE, method=tf.image.ResizeMethod.BILINEAR)\n",
    "    img.set_shape([IMG_SIZE[0], IMG_SIZE[1], 3])\n",
    "    if MODEL_FAMILY == \"resnet\":\n",
    "        img = resnet_preprocess(img)\n",
    "    else:\n",
    "        img = vgg_preprocess(img)\n",
    "    return img, label_id\n",
    "\n",
    "def augment(img, label_id):\n",
    "    img = tf.image.random_flip_left_right(img)\n",
    "    img = tf.image.random_flip_up_down(img)\n",
    "    img = tf.image.random_brightness(img, max_delta=0.10)\n",
    "    return img, label_id\n",
    "\n",
    "def make_ds(paths, labels, training=True):\n",
    "    ds = tf.data.Dataset.from_tensor_slices((paths, labels))\n",
    "    ds = ds.map(load_image, num_parallel_calls=AUTOTUNE)\n",
    "    if training:\n",
    "        ds = ds.map(augment, num_parallel_calls=AUTOTUNE)\n",
    "        ds = ds.shuffle(buffer_size=min(len(paths), 2048), seed=42)\n",
    "    ds = ds.batch(BATCH).prefetch(AUTOTUNE)\n",
    "    return ds\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f0d32e80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T07:42:56.632663Z",
     "iopub.status.busy": "2025-10-02T07:42:56.632447Z",
     "iopub.status.idle": "2025-10-02T07:42:56.637585Z",
     "shell.execute_reply": "2025-10-02T07:42:56.637055Z"
    },
    "papermill": {
     "duration": 0.016162,
     "end_time": "2025-10-02T07:42:56.638567",
     "exception": false,
     "start_time": "2025-10-02T07:42:56.622405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def build_model(num_classes: int, family=\"resnet\"):\n",
    "    if family == \"resnet\":\n",
    "        base = ResNet50(weights=\"imagenet\", include_top=False, input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3))\n",
    "    else:\n",
    "        base = VGG19(weights=\"imagenet\", include_top=False, input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3))\n",
    "    base.trainable = False  # start with frozen base; you can unfreeze later (fine-tuning)\n",
    "\n",
    "    inputs = tf.keras.Input(shape=(IMG_SIZE[0], IMG_SIZE[1], 3))\n",
    "    x = base(inputs, training=False)\n",
    "    x = layers.GlobalAveragePooling2D()(x)\n",
    "    x = layers.Dropout(0.3)(x)\n",
    "    outputs = layers.Dense(num_classes, activation=\"softmax\")(x)\n",
    "\n",
    "    model = models.Model(inputs, outputs)\n",
    "    model.compile(\n",
    "        optimizer=tf.keras.optimizers.Adam(1e-3),\n",
    "        loss=\"sparse_categorical_crossentropy\",\n",
    "        metrics=[\"accuracy\"]\n",
    "    )\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0ae7ceef",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2025-10-02T07:42:56.658349Z",
     "iopub.status.busy": "2025-10-02T07:42:56.658116Z",
     "iopub.status.idle": "2025-10-02T07:44:28.866727Z",
     "shell.execute_reply": "2025-10-02T07:44:28.865957Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 92.219946,
     "end_time": "2025-10-02T07:44:28.868063",
     "exception": false,
     "start_time": "2025-10-02T07:42:56.648117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Fold 1/5 =====\n",
      "Class weights: {0: 0.9333333333333333, 1: 1.1666666666666667, 2: 0.9333333333333333}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1759390977.683153      19 gpu_device.cc:2020] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1759390977.683912      19 gpu_device.cc:2020] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
      "\u001b[1m94765736/94765736\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1759390993.629524      95 device_compiler.h:196] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 - 17s - 17s/step - accuracy: 0.2857 - loss: 1.5241 - val_accuracy: 0.0000e+00 - val_loss: 1.5860 - learning_rate: 0.0010\n",
      "Epoch 2/10\n",
      "1/1 - 0s - 155ms/step - accuracy: 0.4286 - loss: 1.2056 - val_accuracy: 0.0000e+00 - val_loss: 1.4669 - learning_rate: 0.0010\n",
      "Epoch 3/10\n",
      "1/1 - 0s - 283ms/step - accuracy: 0.5000 - loss: 1.2920 - val_accuracy: 0.2500 - val_loss: 1.2955 - learning_rate: 0.0010\n",
      "Epoch 4/10\n",
      "1/1 - 0s - 292ms/step - accuracy: 0.4286 - loss: 0.9690 - val_accuracy: 0.5000 - val_loss: 1.1228 - learning_rate: 0.0010\n",
      "Epoch 5/10\n",
      "1/1 - 0s - 298ms/step - accuracy: 0.7857 - loss: 0.5162 - val_accuracy: 0.7500 - val_loss: 0.9719 - learning_rate: 0.0010\n",
      "Epoch 6/10\n",
      "1/1 - 0s - 162ms/step - accuracy: 0.7857 - loss: 0.5922 - val_accuracy: 0.7500 - val_loss: 0.8328 - learning_rate: 0.0010\n",
      "Epoch 7/10\n",
      "1/1 - 0s - 160ms/step - accuracy: 0.7857 - loss: 0.7640 - val_accuracy: 0.7500 - val_loss: 0.7143 - learning_rate: 0.0010\n",
      "Epoch 8/10\n",
      "1/1 - 0s - 164ms/step - accuracy: 0.9286 - loss: 0.3254 - val_accuracy: 0.7500 - val_loss: 0.6056 - learning_rate: 0.0010\n",
      "Epoch 8: early stopping\n",
      "Restoring model weights from the end of the best epoch: 5.\n",
      "Fold 1 accuracy: 75.00%\n",
      "\n",
      "===== Fold 2/5 =====\n",
      "Class weights: {0: 1.1666666666666667, 1: 0.9333333333333333, 2: 0.9333333333333333}\n",
      "Epoch 1/10\n",
      "1/1 - 14s - 14s/step - accuracy: 0.1429 - loss: 1.6022 - val_accuracy: 0.5000 - val_loss: 1.1094 - learning_rate: 0.0010\n",
      "Epoch 2/10\n",
      "1/1 - 0s - 193ms/step - accuracy: 0.1429 - loss: 1.5168 - val_accuracy: 0.5000 - val_loss: 0.9581 - learning_rate: 0.0010\n",
      "Epoch 3/10\n",
      "1/1 - 0s - 177ms/step - accuracy: 0.2857 - loss: 1.1832 - val_accuracy: 0.5000 - val_loss: 0.8248 - learning_rate: 0.0010\n",
      "Epoch 4/10\n",
      "1/1 - 0s - 315ms/step - accuracy: 0.5714 - loss: 1.0961 - val_accuracy: 0.7500 - val_loss: 0.7177 - learning_rate: 0.0010\n",
      "Epoch 5/10\n",
      "1/1 - 0s - 315ms/step - accuracy: 0.5714 - loss: 1.1778 - val_accuracy: 1.0000 - val_loss: 0.6242 - learning_rate: 0.0010\n",
      "Epoch 6/10\n",
      "1/1 - 0s - 174ms/step - accuracy: 0.6429 - loss: 0.6794 - val_accuracy: 1.0000 - val_loss: 0.5450 - learning_rate: 0.0010\n",
      "Epoch 7/10\n",
      "1/1 - 0s - 171ms/step - accuracy: 0.6429 - loss: 0.5641 - val_accuracy: 1.0000 - val_loss: 0.4812 - learning_rate: 0.0010\n",
      "Epoch 8/10\n",
      "1/1 - 0s - 170ms/step - accuracy: 0.7857 - loss: 0.4913 - val_accuracy: 1.0000 - val_loss: 0.4258 - learning_rate: 0.0010\n",
      "Epoch 8: early stopping\n",
      "Restoring model weights from the end of the best epoch: 5.\n",
      "Fold 2 accuracy: 100.00%\n",
      "\n",
      "===== Fold 3/5 =====\n",
      "Class weights: {0: 0.9333333333333333, 1: 0.9333333333333333, 2: 1.1666666666666667}\n",
      "Epoch 1/10\n",
      "1/1 - 14s - 14s/step - accuracy: 0.2143 - loss: 1.9374 - val_accuracy: 0.2500 - val_loss: 1.4097 - learning_rate: 0.0010\n",
      "Epoch 2/10\n",
      "1/1 - 0s - 182ms/step - accuracy: 0.0714 - loss: 2.0065 - val_accuracy: 0.2500 - val_loss: 1.2337 - learning_rate: 0.0010\n",
      "Epoch 3/10\n",
      "1/1 - 0s - 174ms/step - accuracy: 0.3571 - loss: 1.2427 - val_accuracy: 0.2500 - val_loss: 1.0808 - learning_rate: 0.0010\n",
      "Epoch 4/10\n",
      "1/1 - 0s - 174ms/step - accuracy: 0.6429 - loss: 1.3613 - val_accuracy: 0.2500 - val_loss: 0.9570 - learning_rate: 0.0010\n",
      "Epoch 4: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Fold 3 accuracy: 25.00%\n",
      "\n",
      "===== Fold 4/5 =====\n",
      "Class weights: {0: 1.0, 1: 1.0, 2: 1.0}\n",
      "Epoch 1/10\n",
      "1/1 - 16s - 16s/step - accuracy: 0.3333 - loss: 1.2596 - val_accuracy: 1.0000 - val_loss: 0.4879 - learning_rate: 0.0010\n",
      "Epoch 2/10\n",
      "1/1 - 0s - 144ms/step - accuracy: 0.3333 - loss: 1.4146 - val_accuracy: 1.0000 - val_loss: 0.4956 - learning_rate: 0.0010\n",
      "Epoch 3/10\n",
      "\n",
      "Epoch 3: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n",
      "1/1 - 0s - 142ms/step - accuracy: 0.4667 - loss: 0.8996 - val_accuracy: 1.0000 - val_loss: 0.5078 - learning_rate: 0.0010\n",
      "Epoch 4/10\n",
      "1/1 - 0s - 154ms/step - accuracy: 0.7333 - loss: 0.7050 - val_accuracy: 0.6667 - val_loss: 0.5117 - learning_rate: 5.0000e-04\n",
      "Epoch 4: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Fold 4 accuracy: 100.00%\n",
      "\n",
      "===== Fold 5/5 =====\n",
      "Class weights: {0: 1.0, 1: 1.0, 2: 1.0}\n",
      "Epoch 1/10\n",
      "1/1 - 14s - 14s/step - accuracy: 0.4000 - loss: 1.5001 - val_accuracy: 0.6667 - val_loss: 0.7603 - learning_rate: 0.0010\n",
      "Epoch 2/10\n",
      "1/1 - 0s - 181ms/step - accuracy: 0.4667 - loss: 1.1811 - val_accuracy: 0.6667 - val_loss: 0.6976 - learning_rate: 0.0010\n",
      "Epoch 3/10\n",
      "1/1 - 0s - 180ms/step - accuracy: 0.7333 - loss: 0.9301 - val_accuracy: 0.6667 - val_loss: 0.6763 - learning_rate: 0.0010\n",
      "Epoch 4/10\n",
      "1/1 - 0s - 168ms/step - accuracy: 0.6667 - loss: 0.8585 - val_accuracy: 0.6667 - val_loss: 0.6744 - learning_rate: 0.0010\n",
      "Epoch 4: early stopping\n",
      "Restoring model weights from the end of the best epoch: 1.\n",
      "Fold 5 accuracy: 66.67%\n",
      "\n",
      "Per-fold accuracies (%): [75.0, 100.0, 25.0, 100.0, 66.67]\n",
      "Fold-average accuracy: 73.33%  (± 27.59%)\n"
     ]
    }
   ],
   "source": [
    "fold_accuracies = []\n",
    "all_fold_logs = []\n",
    "\n",
    "X = df[\"image\"].values\n",
    "y = df[\"label_id\"].values\n",
    "\n",
    "for fold, (train_idx, val_idx) in enumerate(skf.split(X, y), start=1):\n",
    "    print(f\"\\n===== Fold {fold}/{N_SPLITS} =====\")\n",
    "    X_train, X_val = X[train_idx], X[val_idx]\n",
    "    y_train, y_val = y[train_idx], y[val_idx]\n",
    "\n",
    "    # Optional: class weights for imbalance\n",
    "    classes = np.unique(y_train)\n",
    "    cw = compute_class_weight(class_weight='balanced', classes=classes, y=y_train)\n",
    "    class_weights = {int(c): float(w) for c, w in zip(classes, cw)}\n",
    "    print(\"Class weights:\", class_weights)\n",
    "\n",
    "    # Datasets\n",
    "    ds_train = make_ds(X_train, y_train, training=True)\n",
    "    ds_val   = make_ds(X_val,   y_val,   training=False)\n",
    "\n",
    "    # Fresh model each fold\n",
    "    model = build_model(num_classes, family=MODEL_FAMILY)\n",
    "\n",
    "    callbacks = [\n",
    "        EarlyStopping(monitor=\"val_accuracy\", patience=3, restore_best_weights=True, verbose=1),\n",
    "        ReduceLROnPlateau(monitor=\"val_loss\", factor=0.5, patience=2, verbose=1)\n",
    "    ]\n",
    "\n",
    "    history = model.fit(\n",
    "        ds_train,\n",
    "        validation_data=ds_val,\n",
    "        epochs=EPOCHS,\n",
    "        class_weight=class_weights,\n",
    "        verbose=2,\n",
    "        callbacks=callbacks\n",
    "    )\n",
    "\n",
    "    # Evaluate\n",
    "    loss, acc = model.evaluate(ds_val, verbose=0)\n",
    "    print(f\"Fold {fold} accuracy: {acc*100:.2f}%\")\n",
    "    fold_accuracies.append(acc)\n",
    "\n",
    "    # Log minimal history per fold\n",
    "    all_fold_logs.append({\n",
    "        \"fold\": fold,\n",
    "        \"val_accuracy_history\": list(map(float, history.history.get(\"val_accuracy\", []))),\n",
    "        \"val_loss_history\": list(map(float, history.history.get(\"val_loss\", []))),\n",
    "        \"best_val_acc\": float(np.max(history.history.get(\"val_accuracy\", [0.0])))\n",
    "    })\n",
    "\n",
    "fold_avg = float(np.mean(fold_accuracies))\n",
    "fold_std = float(np.std(fold_accuracies))\n",
    "print(\"\\nPer-fold accuracies (%):\", [round(a*100, 2) for a in fold_accuracies])\n",
    "print(f\"Fold-average accuracy: {fold_avg*100:.2f}%  (± {fold_std*100:.2f}%)\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "25cfe736",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2025-10-02T07:44:28.894719Z",
     "iopub.status.busy": "2025-10-02T07:44:28.894258Z",
     "iopub.status.idle": "2025-10-02T07:44:29.965862Z",
     "shell.execute_reply": "2025-10-02T07:44:29.965209Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 1.086064,
     "end_time": "2025-10-02T07:44:29.967214",
     "exception": false,
     "start_time": "2025-10-02T07:44:28.881150",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot each fold’s training/validation accuracy\n",
    "for log in all_fold_logs:\n",
    "    plt.figure(figsize=(6,4))\n",
    "    plt.plot(log[\"val_accuracy_history\"], label=\"val_accuracy\")\n",
    "    plt.plot(log[\"val_loss_history\"], label=\"val_loss\")\n",
    "    plt.title(f\"Fold {log['fold']} – Accuracy & Loss\")\n",
    "    plt.xlabel(\"Epoch\")\n",
    "    plt.ylabel(\"Value\")\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "# Plot overall per-fold accuracy bar chart\n",
    "plt.figure(figsize=(6,4))\n",
    "plt.bar([f\"Fold {i+1}\" for i in range(len(fold_accuracies))],\n",
    "        [a*100 for a in fold_accuracies])\n",
    "plt.axhline(y=fold_avg*100, color=\"red\", linestyle=\"--\", label=f\"Avg: {fold_avg*100:.2f}%\")\n",
    "plt.ylabel(\"Accuracy (%)\")\n",
    "plt.title(\"Per-Fold Validation Accuracy\")\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e45040d",
   "metadata": {
    "papermill": {
     "duration": 0.014659,
     "end_time": "2025-10-02T07:44:29.998412",
     "exception": false,
     "start_time": "2025-10-02T07:44:29.983753",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Fine tuning\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2c92292c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T07:44:30.029344Z",
     "iopub.status.busy": "2025-10-02T07:44:30.029140Z",
     "iopub.status.idle": "2025-10-02T07:46:34.657572Z",
     "shell.execute_reply": "2025-10-02T07:46:34.656649Z"
    },
    "papermill": {
     "duration": 124.645879,
     "end_time": "2025-10-02T07:46:34.659069",
     "exception": false,
     "start_time": "2025-10-02T07:44:30.013190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Fold 1/3 =====\n",
      "Val class counts: {'brownspot': 2, 'baterial_blight': 2, 'rice_blast': 2}\n",
      "Class weights: {0: 1.0, 1: 1.0, 2: 1.0}\n",
      "Epoch 1/2\n",
      "1/1 - 16s - 16s/step - accuracy: 0.3333 - loss: 1.6344 - val_accuracy: 0.3333 - val_loss: 1.2454\n",
      "Epoch 2/2\n",
      "1/1 - 0s - 125ms/step - accuracy: 0.3333 - loss: 1.4574 - val_accuracy: 0.6667 - val_loss: 1.0795\n",
      "Epoch 1/8\n",
      "1/1 - 20s - 20s/step - accuracy: 0.5833 - loss: 0.9485 - val_accuracy: 0.6667 - val_loss: 0.8840 - learning_rate: 1.0000e-04\n",
      "Epoch 2/8\n",
      "1/1 - 0s - 332ms/step - accuracy: 0.9167 - loss: 0.4155 - val_accuracy: 0.6667 - val_loss: 0.7143 - learning_rate: 1.0000e-04\n",
      "Epoch 3/8\n",
      "1/1 - 0s - 350ms/step - accuracy: 1.0000 - loss: 0.0765 - val_accuracy: 1.0000 - val_loss: 0.5937 - learning_rate: 1.0000e-04\n",
      "Epoch 4/8\n",
      "1/1 - 0s - 313ms/step - accuracy: 1.0000 - loss: 0.0328 - val_accuracy: 1.0000 - val_loss: 0.5018 - learning_rate: 1.0000e-04\n",
      "Epoch 5/8\n",
      "1/1 - 0s - 325ms/step - accuracy: 1.0000 - loss: 0.0141 - val_accuracy: 1.0000 - val_loss: 0.4310 - learning_rate: 1.0000e-04\n",
      "Epoch 6/8\n",
      "1/1 - 0s - 327ms/step - accuracy: 1.0000 - loss: 0.0198 - val_accuracy: 1.0000 - val_loss: 0.3802 - learning_rate: 1.0000e-04\n",
      "Epoch 7/8\n",
      "1/1 - 0s - 339ms/step - accuracy: 1.0000 - loss: 0.0023 - val_accuracy: 1.0000 - val_loss: 0.3408 - learning_rate: 1.0000e-04\n",
      "Epoch 8/8\n",
      "1/1 - 0s - 321ms/step - accuracy: 1.0000 - loss: 0.0051 - val_accuracy: 1.0000 - val_loss: 0.3103 - learning_rate: 1.0000e-04\n",
      "Restoring model weights from the end of the best epoch: 8.\n",
      "Fold 1 accuracy: 100.00%  |  Macro-F1: 1.000\n",
      "                 precision    recall  f1-score   support\n",
      "\n",
      "baterial_blight      1.000     1.000     1.000         2\n",
      "      brownspot      1.000     1.000     1.000         2\n",
      "     rice_blast      1.000     1.000     1.000         2\n",
      "\n",
      "       accuracy                          1.000         6\n",
      "      macro avg      1.000     1.000     1.000         6\n",
      "   weighted avg      1.000     1.000     1.000         6\n",
      "\n",
      "\n",
      "===== Fold 2/3 =====\n",
      "Val class counts: {'baterial_blight': 2, 'brownspot': 2, 'rice_blast': 2}\n",
      "Class weights: {0: 1.0, 1: 1.0, 2: 1.0}\n",
      "Epoch 1/2\n",
      "1/1 - 13s - 13s/step - accuracy: 0.3333 - loss: 1.5825 - val_accuracy: 0.8333 - val_loss: 0.6295\n",
      "Epoch 2/2\n",
      "1/1 - 0s - 161ms/step - accuracy: 0.4167 - loss: 1.3475 - val_accuracy: 1.0000 - val_loss: 0.5744\n",
      "Epoch 1/8\n",
      "1/1 - 19s - 19s/step - accuracy: 0.4167 - loss: 1.0117 - val_accuracy: 1.0000 - val_loss: 0.5148 - learning_rate: 1.0000e-04\n",
      "Epoch 2/8\n",
      "1/1 - 0s - 349ms/step - accuracy: 0.9167 - loss: 0.2893 - val_accuracy: 1.0000 - val_loss: 0.4688 - learning_rate: 1.0000e-04\n",
      "Epoch 3/8\n",
      "1/1 - 0s - 329ms/step - accuracy: 1.0000 - loss: 0.0900 - val_accuracy: 0.8333 - val_loss: 0.4394 - learning_rate: 1.0000e-04\n",
      "Epoch 4/8\n",
      "1/1 - 0s - 342ms/step - accuracy: 1.0000 - loss: 0.0349 - val_accuracy: 0.8333 - val_loss: 0.4250 - learning_rate: 1.0000e-04\n",
      "Epoch 5/8\n",
      "1/1 - 0s - 335ms/step - accuracy: 1.0000 - loss: 0.0109 - val_accuracy: 0.8333 - val_loss: 0.4179 - learning_rate: 1.0000e-04\n",
      "Epoch 6/8\n",
      "1/1 - 0s - 339ms/step - accuracy: 1.0000 - loss: 0.0066 - val_accuracy: 0.8333 - val_loss: 0.4151 - learning_rate: 1.0000e-04\n",
      "Epoch 7/8\n",
      "1/1 - 0s - 183ms/step - accuracy: 1.0000 - loss: 0.0119 - val_accuracy: 0.8333 - val_loss: 0.4171 - learning_rate: 1.0000e-04\n",
      "Epoch 8/8\n",
      "\n",
      "Epoch 8: ReduceLROnPlateau reducing learning rate to 4.999999873689376e-05.\n",
      "1/1 - 0s - 184ms/step - accuracy: 1.0000 - loss: 0.0031 - val_accuracy: 0.8333 - val_loss: 0.4211 - learning_rate: 1.0000e-04\n",
      "Restoring model weights from the end of the best epoch: 6.\n",
      "Fold 2 accuracy: 83.33%  |  Macro-F1: 0.822\n",
      "                 precision    recall  f1-score   support\n",
      "\n",
      "baterial_blight      0.667     1.000     0.800         2\n",
      "      brownspot      1.000     0.500     0.667         2\n",
      "     rice_blast      1.000     1.000     1.000         2\n",
      "\n",
      "       accuracy                          0.833         6\n",
      "      macro avg      0.889     0.833     0.822         6\n",
      "   weighted avg      0.889     0.833     0.822         6\n",
      "\n",
      "\n",
      "===== Fold 3/3 =====\n",
      "Val class counts: {'rice_blast': 2, 'brownspot': 2, 'baterial_blight': 2}\n",
      "Class weights: {0: 1.0, 1: 1.0, 2: 1.0}\n",
      "Epoch 1/2\n",
      "1/1 - 13s - 13s/step - accuracy: 0.4167 - loss: 1.1308 - val_accuracy: 0.3333 - val_loss: 1.2324\n",
      "Epoch 2/2\n",
      "1/1 - 0s - 165ms/step - accuracy: 0.5000 - loss: 1.1009 - val_accuracy: 0.5000 - val_loss: 1.0928\n",
      "Epoch 1/8\n",
      "1/1 - 20s - 20s/step - accuracy: 0.4167 - loss: 0.9673 - val_accuracy: 0.5000 - val_loss: 0.9660 - learning_rate: 1.0000e-04\n",
      "Epoch 2/8\n",
      "1/1 - 0s - 342ms/step - accuracy: 1.0000 - loss: 0.2653 - val_accuracy: 0.5000 - val_loss: 0.8727 - learning_rate: 1.0000e-04\n",
      "Epoch 3/8\n",
      "1/1 - 0s - 330ms/step - accuracy: 1.0000 - loss: 0.0456 - val_accuracy: 0.5000 - val_loss: 0.8190 - learning_rate: 1.0000e-04\n",
      "Epoch 4/8\n",
      "1/1 - 0s - 340ms/step - accuracy: 1.0000 - loss: 0.0232 - val_accuracy: 0.5000 - val_loss: 0.7871 - learning_rate: 1.0000e-04\n",
      "Epoch 5/8\n",
      "1/1 - 0s - 331ms/step - accuracy: 1.0000 - loss: 0.0062 - val_accuracy: 0.5000 - val_loss: 0.7642 - learning_rate: 1.0000e-04\n",
      "Epoch 6/8\n",
      "1/1 - 0s - 338ms/step - accuracy: 1.0000 - loss: 0.0066 - val_accuracy: 0.5000 - val_loss: 0.7464 - learning_rate: 1.0000e-04\n",
      "Epoch 7/8\n",
      "1/1 - 0s - 334ms/step - accuracy: 1.0000 - loss: 0.0076 - val_accuracy: 0.5000 - val_loss: 0.7316 - learning_rate: 1.0000e-04\n",
      "Epoch 8/8\n",
      "1/1 - 0s - 336ms/step - accuracy: 1.0000 - loss: 0.0016 - val_accuracy: 0.5000 - val_loss: 0.7189 - learning_rate: 1.0000e-04\n",
      "Restoring model weights from the end of the best epoch: 8.\n",
      "Fold 3 accuracy: 50.00%  |  Macro-F1: 0.413\n",
      "                 precision    recall  f1-score   support\n",
      "\n",
      "baterial_blight      0.400     1.000     0.571         2\n",
      "      brownspot      0.000     0.000     0.000         2\n",
      "     rice_blast      1.000     0.500     0.667         2\n",
      "\n",
      "       accuracy                          0.500         6\n",
      "      macro avg      0.467     0.500     0.413         6\n",
      "   weighted avg      0.467     0.500     0.413         6\n",
      "\n",
      "\n",
      "Per-fold accuracy (%): [100.0, 83.33, 50.0]\n",
      "Per-fold macro-F1     : [1.0, 0.822, 0.413]\n",
      "\n",
      "3-fold average accuracy: 77.78%  (± 20.79%)\n",
      "3-fold average macro-F1: 0.745       (± 0.246)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n"
     ]
    }
   ],
   "source": [
    "# ===================== 3-FOLD CV with Warmup + Fine-tune =====================\n",
    "import os, random, numpy as np, tensorflow as tf\n",
    "from pathlib import Path\n",
    "from collections import Counter\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.utils.class_weight import compute_class_weight\n",
    "from sklearn.metrics import f1_score, classification_report\n",
    "from tensorflow.keras import layers, models\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
    "from tensorflow.keras.applications import ResNet50, VGG19\n",
    "from tensorflow.keras.applications.resnet50 import preprocess_input as resnet_preprocess\n",
    "from tensorflow.keras.applications.vgg19 import preprocess_input as vgg_preprocess\n",
    "\n",
    "# ---------- reproducibility ----------\n",
    "SEED = 42\n",
    "os.environ[\"PYTHONHASHSEED\"] = str(SEED)\n",
    "random.seed(SEED)\n",
    "np.random.seed(SEED)\n",
    "tf.random.set_seed(SEED)\n",
    "\n",
    "# ---------- configuration (adjust if you like) ----------\n",
    "N_SPLITS = 3\n",
    "EPOCHS_WARMUP   = 2            # backbone frozen\n",
    "EPOCHS_FINETUNE = 8            # after unfreezing top layers\n",
    "LR_WARMUP   = 1e-3\n",
    "LR_FINETUNE = 1e-4\n",
    "MODEL_FAMILY = MODEL_FAMILY     # \"resnet\" or \"vgg\" (reuse your earlier setting)\n",
    "IMG_SIZE = IMG_SIZE             # e.g., (224, 224)\n",
    "BATCH = BATCH                   # e.g., 16\n",
    "\n",
    "# ---------- label encoding ----------\n",
    "le = LabelEncoder()\n",
    "df[\"label_id\"] = le.fit_transform(df[\"label\"])\n",
    "class_names = list(le.classes_)\n",
    "num_classes = len(class_names)\n",
    "\n",
    "# ---------- tf.data pipelines ----------\n",
    "AUTOTUNE = tf.data.AUTOTUNE\n",
    "if MODEL_FAMILY == \"resnet\":\n",
    "    preprocess_fn = resnet_preprocess\n",
    "else:\n",
    "    preprocess_fn = vgg_preprocess\n",
    "\n",
    "def load_image(path, label_id):\n",
    "    img = tf.io.read_file(path)\n",
    "    img = tf.image.decode_image(img, channels=3, expand_animations=False)\n",
    "    img = tf.image.resize(img, IMG_SIZE, method=tf.image.ResizeMethod.BILINEAR)\n",
    "    img.set_shape([IMG_SIZE[0], IMG_SIZE[1], 3])\n",
    "    img = preprocess_fn(img)\n",
    "    return img, label_id\n",
    "\n",
    "def augment(img, label_id):\n",
    "    # light, safe augments for small datasets\n",
    "    img = tf.image.random_flip_left_right(img)\n",
    "    img = tf.image.random_brightness(img, max_delta=0.10)\n",
    "    img = tf.image.random_contrast(img, lower=0.9, upper=1.1)\n",
    "    return img, label_id\n",
    "\n",
    "def make_ds(paths, labels, training=True):\n",
    "    ds = tf.data.Dataset.from_tensor_slices((paths, labels))\n",
    "    ds = ds.map(load_image, num_parallel_calls=AUTOTUNE)\n",
    "    if training:\n",
    "        ds = ds.map(augment, num_parallel_calls=AUTOTUNE)\n",
    "        ds = ds.shuffle(buffer_size=min(len(paths), 2048), seed=SEED)\n",
    "    ds = ds.batch(BATCH).prefetch(AUTOTUNE)\n",
    "    return ds\n",
    "\n",
    "# ---------- model factory (returns model and base) ----------\n",
    "def build_model(num_classes: int, family=\"resnet\"):\n",
    "    if family == \"resnet\":\n",
    "        base = ResNet50(weights=\"imagenet\", include_top=False,\n",
    "                        input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3))\n",
    "        n_unfreeze = 20  # unfreeze last ~20 layers for fine-tuning\n",
    "    else:\n",
    "        base = VGG19(weights=\"imagenet\", include_top=False,\n",
    "                     input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3))\n",
    "        n_unfreeze = 8   # VGG: unfreeze a few conv blocks\n",
    "\n",
    "    base.trainable = False  # start frozen\n",
    "    inputs = tf.keras.Input(shape=(IMG_SIZE[0], IMG_SIZE[1], 3))\n",
    "    x = base(inputs, training=False)\n",
    "    x = layers.GlobalAveragePooling2D()(x)\n",
    "    x = layers.Dropout(0.3)(x)\n",
    "    outputs = layers.Dense(num_classes, activation=\"softmax\")(x)\n",
    "    model = models.Model(inputs, outputs)\n",
    "\n",
    "    # attach attribute so we know how many to unfreeze later\n",
    "    model._feature_base = base\n",
    "    model._n_unfreeze = n_unfreeze\n",
    "    return model\n",
    "\n",
    "# ---------- CV loop (3 folds) ----------\n",
    "X = df[\"image\"].values\n",
    "y = df[\"label_id\"].values\n",
    "skf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\n",
    "\n",
    "fold_acc, fold_f1 = [], []\n",
    "\n",
    "for fold, (tr_idx, va_idx) in enumerate(skf.split(X, y), start=1):\n",
    "    X_tr, X_va = X[tr_idx], X[va_idx]\n",
    "    y_tr, y_va = y[tr_idx], y[va_idx]\n",
    "\n",
    "    # sanity: show val class counts\n",
    "    print(f\"\\n===== Fold {fold}/{N_SPLITS} =====\")\n",
    "    print(\"Val class counts:\", {class_names[k]: int(v) for k, v in Counter(y_va).items()})\n",
    "\n",
    "    # class weights (optional but helpful on small/imbalanced data)\n",
    "    cls = np.unique(y_tr)\n",
    "    cw = compute_class_weight(class_weight='balanced', classes=cls, y=y_tr)\n",
    "    class_weights = {int(c): float(w) for c, w in zip(cls, cw)}\n",
    "    print(\"Class weights:\", class_weights)\n",
    "\n",
    "    ds_tr = make_ds(X_tr, y_tr, training=True)\n",
    "    ds_va = make_ds(X_va, y_va, training=False)\n",
    "\n",
    "    # build model\n",
    "    model = build_model(num_classes, family=MODEL_FAMILY)\n",
    "\n",
    "    # --- warmup (frozen base) ---\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(LR_WARMUP),\n",
    "                  loss=\"sparse_categorical_crossentropy\",\n",
    "                  metrics=[\"accuracy\"])\n",
    "    model.fit(\n",
    "        ds_tr,\n",
    "        validation_data=ds_va,\n",
    "        epochs=EPOCHS_WARMUP,\n",
    "        verbose=2\n",
    "    )\n",
    "\n",
    "    # --- unfreeze top layers and fine-tune ---\n",
    "    base = model._feature_base\n",
    "    n_unfreeze = model._n_unfreeze\n",
    "    for layer in base.layers[-n_unfreeze:]:\n",
    "        layer.trainable = True\n",
    "\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(LR_FINETUNE),\n",
    "                  loss=\"sparse_categorical_crossentropy\",\n",
    "                  metrics=[\"accuracy\"])\n",
    "\n",
    "    callbacks = [\n",
    "        EarlyStopping(monitor=\"val_loss\", patience=3, restore_best_weights=True, verbose=1),\n",
    "        ReduceLROnPlateau(monitor=\"val_loss\", factor=0.5, patience=2, verbose=1)\n",
    "    ]\n",
    "\n",
    "    history = model.fit(\n",
    "        ds_tr,\n",
    "        validation_data=ds_va,\n",
    "        epochs=EPOCHS_FINETUNE,\n",
    "        class_weight=class_weights,\n",
    "        callbacks=callbacks,\n",
    "        verbose=2\n",
    "    )\n",
    "\n",
    "    # evaluate metrics\n",
    "    loss, acc = model.evaluate(ds_va, verbose=0)\n",
    "    y_true, y_pred = [], []\n",
    "    for imgs, lbls in ds_va:\n",
    "        probs = model.predict(imgs, verbose=0)\n",
    "        y_true.extend(lbls.numpy().tolist())\n",
    "        y_pred.extend(np.argmax(probs, axis=1).tolist())\n",
    "    f1 = f1_score(y_true, y_pred, average=\"macro\")\n",
    "\n",
    "    print(f\"Fold {fold} accuracy: {acc*100:.2f}%  |  Macro-F1: {f1:.3f}\")\n",
    "    print(classification_report(y_true, y_pred, target_names=class_names, digits=3))\n",
    "\n",
    "    fold_acc.append(acc)\n",
    "    fold_f1.append(f1)\n",
    "\n",
    "# ---------- final summary ----------\n",
    "acc_mean, acc_std = float(np.mean(fold_acc)), float(np.std(fold_acc))\n",
    "f1_mean,  f1_std  = float(np.mean(fold_f1)),  float(np.std(fold_f1))\n",
    "\n",
    "print(\"\\nPer-fold accuracy (%):\", [round(a*100, 2) for a in fold_acc])\n",
    "print(\"Per-fold macro-F1     :\", [round(f, 3) for f in fold_f1])\n",
    "print(f\"\\n3-fold average accuracy: {acc_mean*100:.2f}%  (± {acc_std*100:.2f}%)\")\n",
    "print(f\"3-fold average macro-F1: {f1_mean:.3f}       (± {f1_std:.3f})\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdece2e2",
   "metadata": {
    "papermill": {
     "duration": 0.017865,
     "end_time": "2025-10-02T07:46:34.697587",
     "exception": false,
     "start_time": "2025-10-02T07:46:34.679722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 8376805,
     "sourceId": 13216125,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 334.391202,
   "end_time": "2025-10-02T07:46:38.359077",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-02T07:41:03.967875",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
